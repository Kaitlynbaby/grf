% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/average_treatment_effect.R
\name{average_treatment_effect}
\alias{average_treatment_effect}
\title{Estimate average treatment effects using a causal forest}
\usage{
average_treatment_effect(
  forest,
  target.sample = c("all", "treated", "control", "overlap"),
  method = c("AIPW", "TMLE"),
  subset = NULL,
  debiasing.weights = NULL,
  num.trees.for.weights = 500
)
}
\arguments{
\item{forest}{The trained forest.}

\item{target.sample}{Which sample to aggregate treatment effects over.
Note: Options other than "all" are only currently implemented
for causal forests.}

\item{method}{Method used for doubly robust inference. Can be either
augmented inverse-propensity weighting (AIPW), or
targeted maximum likelihood estimation (TMLE). Note:
TMLE is currently only implemented for causal forests with
a binary treatment.}

\item{subset}{Specifies subset of the training examples over which we
estimate the ATE. WARNING: For valid statistical performance,
the subset should be defined only using features Xi, not using
the treatment Wi or the outcome Yi.}

\item{debiasing.weights}{A vector of length n (or the subset length) of debiasing weights.
If NULL (default) these are obtained via the appropriate doubly robust score
construction, e.g., in the case of causal_forests with a binary treatment, they
are obtained via inverse-propensity weighting.}

\item{num.trees.for.weights}{In some cases (e.g., with causal forests with a continuous
treatment), we need to train auxiliary forests to learn debiasing weights.
This is the number of trees used for this task. Note: this argument is only
used when debiasing.weights = NULL.}
}
\value{
An estimate of the average treatment effect, along with standard error.
}
\description{
Gets estimates of one of the following.
\itemize{
  \item The average treatment effect (target.sample = all): E[Y(1) - Y(0)]
  \item The average treatment effect on the treated (target.sample = treated): E[Y(1) - Y(0) | Wi = 1]
  \item The average treatment effect on the controls (target.sample = control): : E[Y(1) - Y(0) | Wi = 0]
  \item The overlap-weighted average treatment effect (target.sample = overlap):
  E[e(X) (1 - e(X)) (Y(1) - Y(0))] / E[e(X) (1 - e(X)), where e(x) = P[Wi = 1 | Xi = x].
}
}
\details{
This last estimand is recommended by Li, Morgan, and Zaslavsky (JASA, 2017)
in case of poor overlap (i.e., when the propensities e(x) may be very close
to 0 or 1), as it doesn't involve dividing by estimated propensities.

If clusters are specified, then each unit gets equal weight by default. For
example, if there are 10 clusters with 1 unit each and per-cluster ATE = 1,
and there are 10 clusters with 19 units each and per-cluster ATE = 0, then
the overall ATE is 0.05 (additional sample.weights allow for custom
weighting). If equalize.cluster.weights = TRUE each cluster gets equal weight
and the overall ATE is 0.5.
}
\examples{
\donttest{
# Train a causal forest.
n <- 50
p <- 10
X <- matrix(rnorm(n * p), n, p)
W <- rbinom(n, 1, 0.5)
Y <- pmax(X[, 1], 0) * W + X[, 2] + pmin(X[, 3], 0) + rnorm(n)
c.forest <- causal_forest(X, Y, W)

# Predict using the forest.
X.test <- matrix(0, 101, p)
X.test[, 1] <- seq(-2, 2, length.out = 101)
c.pred <- predict(c.forest, X.test)
# Estimate the conditional average treatment effect on the full sample (CATE).
average_treatment_effect(c.forest, target.sample = "all")

# Estimate the conditional average treatment effect on the treated sample (CATT).
# We don't expect much difference between the CATE and the CATT in this example,
# since treatment assignment was randomized.
average_treatment_effect(c.forest, target.sample = "treated")

# Estimate the conditional average treatment effect on samples with positive X[,1].
average_treatment_effect(c.forest, target.sample = "all", subset = X[, 1] > 0)
}

}
